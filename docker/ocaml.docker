# BUILD-USING:    docker build -t ${repo}/runner-ocaml .
# TEST-USING:     docker run --rm -i -t --name=test-runner-ocaml --entrypoint=/bin/bash ${repo}/runner-ocaml -s
# RUN-USING:      docker run --rm --name=runner-ocaml ${repo}/runner-ocaml --help

# Pull base image.
ARG repo
FROM ${repo}/base-runner
ARG codeuser

# Install OCAML
RUN apt-get install -y software-properties-common
RUN add-apt-repository -y ppa:avsm/ppa
RUN apt-get -y update
RUN apt-get -y install camlp4 ocaml opam

RUN ln -s /home/${codeuser} /workspace
ENV NPM_CONFIG_LOGLEVEL warn

WORKDIR /runner
COPY package.json package.json
RUN npm install --production

COPY *.js ./
COPY lib/*.js lib/
COPY lib/*.sh lib/
COPY lib/utils lib/utils
COPY lib/runners/ocaml.js lib/runners/
COPY examples/ocaml.yml examples/
COPY test/runner.js test/
COPY test/runners/ocaml_spec.js test/runners/

USER ${codeuser}
ENV USER=${codeuser} HOME=/home/${codeuser}

# Install opam stuff as the target user (so that they have utop, etc)
# Note that because aspucd is max of 1.8 (a broken version) on Ubuntu Trusty, we have to use the internal solver
RUN opam init --use-internal-solver  -y
RUN eval `opam config env`
RUN echo ". $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true" >> ~/.profile
RUN echo ". $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true" >> ~/.bashrc
RUN opam update --use-internal-solver -y
RUN opam install --use-internal-solver -y ocamlbuild ounit core batteries lwt utop

RUN echo '#!/bin/bash' > /home/${codeuser}/run_ocaml.sh
RUN echo 'eval `opam config env` && $@' >> /home/${codeuser}/run_ocaml.sh
RUN chmod +x /home/${codeuser}/run_ocaml.sh

RUN /home/${codeuser}/run_ocaml.sh CODEUSER=${codeuser} mocha -t 5000 test/runners/ocaml_spec.js

ENTRYPOINT ["/home/${codeuser}/run_ocaml.sh", "node"]
